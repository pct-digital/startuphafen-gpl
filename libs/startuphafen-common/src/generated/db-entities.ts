/* eslint-disable @typescript-eslint/no-empty-object-type */ 
 // Generated 2025-07-22T12:10:11.066Z 
/*
 * This file was generated by a tool.
 * 
 * !!!!DO NOT MODIFY THIS FILE BY HAND!!!!
 * !!!!DO NOT MODIFY THIS FILE BY HAND!!!!
 * !!!!DO NOT MODIFY THIS FILE BY HAND!!!!
 * Rerun npx nx run startuphafen-backend-server:entities to update this file from the newest database migration files. * Begin using this by defining a file called user-entities.ts in common where you can define entity types not present in the database
 * and especially define your full ENTITY_SCHEMA:
 * 
 * export const YOUR_APP_ENTITY_SCHEMA = buildEntitySchemaConfigurations({... fill this as enforced by the type system});
 */
export interface Answers {
  flowId: string;
  id: number;
  key: string;
  projectId: number;
  strapiAnswerId: number;
  type: string;
  value: string;
  xmlKey: string;
}
export interface FlagTracking {
  flag: string;
  id: number;
  projectId: number;
  qId: string;
}
export interface Project {
  gewASent: boolean;
  id: number;
  name: string;
  progress: number;
  steErSent: boolean;
  userId: string;
}
export interface QuestionTracking {
  id: number;
  posIndex: number;
  projectId: number;
  strapiQDictPosIndex: number;
  strapiQuestionFlowId: string;
}
export interface ShAnswers {
  catalogueId: string;
  id: number;
  key: string;
  projectId: number;
  strapiAnswerId: string;
  type: string;
  value: string;
  xmlKey: string;
}
export interface ShCatalogueVersions {
  catalogueId: string;
  catalogueJSON: string;
  createdAt: Date;
  id: number;
}
export interface ShProject {
  gewASent: boolean;
  id: number;
  name: string;
  progress: number;
  steErSent: boolean;
  userId: string;
  versionId: number;
}
export interface ShQuestionTracking {
  id: number;
  posIndex: number;
  projectId: number;
  strapiQuestionId: string;
}
export interface ShUser {
  academicTitle: string | null;
  cellPhoneNumber: string;
  city: string;
  country: string;
  dateOfBirth: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  name: string | null;
  phoneNumber: string;
  postalCode: string;
  roles: string[] | null;
  street: string;
  title: string | null;
}

export const STARTUPHAFENBACKEND_TABLES = {
  ANSWERS: "Answers",
  FLAGTRACKING: "FlagTracking",
  PROJECT: "Project",
  QUESTIONTRACKING: "QuestionTracking",
  SHANSWERS: "ShAnswers",
  SHCATALOGUEVERSIONS: "ShCatalogueVersions",
  SHPROJECT: "ShProject",
  SHQUESTIONTRACKING: "ShQuestionTracking",
  SHUSER: "ShUser",
};

import {
  AnyEntitiesConfiguration,
  EntityConfiguration,
} from "@startuphafen/entity-engine/common";

// Generated by ts-to-zod
import { z } from "zod";

export const answersSchema = z.object({
  flowId: z.string(),
  id: z.number(),
  key: z.string(),
  projectId: z.number(),
  strapiAnswerId: z.number(),
  type: z.string(),
  value: z.string(),
  xmlKey: z.string(),
});

export const flagTrackingSchema = z.object({
  flag: z.string(),
  id: z.number(),
  projectId: z.number(),
  qId: z.string(),
});

export const projectSchema = z.object({
  gewASent: z.boolean(),
  id: z.number(),
  name: z.string(),
  progress: z.number(),
  steErSent: z.boolean(),
  userId: z.string(),
});

export const questionTrackingSchema = z.object({
  id: z.number(),
  posIndex: z.number(),
  projectId: z.number(),
  strapiQDictPosIndex: z.number(),
  strapiQuestionFlowId: z.string(),
});

export const shAnswersSchema = z.object({
  catalogueId: z.string(),
  id: z.number(),
  key: z.string(),
  projectId: z.number(),
  strapiAnswerId: z.string(),
  type: z.string(),
  value: z.string(),
  xmlKey: z.string(),
});

export const shCatalogueVersionsSchema = z.object({
  catalogueId: z.string(),
  catalogueJSON: z.string(),
  createdAt: z.date(),
  id: z.number(),
});

export const shProjectSchema = z.object({
  gewASent: z.boolean(),
  id: z.number(),
  name: z.string(),
  progress: z.number(),
  steErSent: z.boolean(),
  userId: z.string(),
  versionId: z.number(),
});

export const shQuestionTrackingSchema = z.object({
  id: z.number(),
  posIndex: z.number(),
  projectId: z.number(),
  strapiQuestionId: z.string(),
});

export const shUserSchema = z.object({
  academicTitle: z.string().nullable(),
  cellPhoneNumber: z.string(),
  city: z.string(),
  country: z.string(),
  dateOfBirth: z.string(),
  email: z.string(),
  firstName: z.string(),
  id: z.string(),
  lastName: z.string(),
  name: z.string().nullable(),
  phoneNumber: z.string(),
  postalCode: z.string(),
  roles: z.array(z.string()).nullable(),
  street: z.string(),
  title: z.string().nullable(),
});

export const answersKeysSchema = z.union([
  z.literal("flowId"),
  z.literal("id"),
  z.literal("key"),
  z.literal("projectId"),
  z.literal("strapiAnswerId"),
  z.literal("type"),
  z.literal("value"),
  z.literal("xmlKey"),
]);
export const flagTrackingKeysSchema = z.union([
  z.literal("flag"),
  z.literal("id"),
  z.literal("projectId"),
  z.literal("qId"),
]);
export const projectKeysSchema = z.union([
  z.literal("gewASent"),
  z.literal("id"),
  z.literal("name"),
  z.literal("progress"),
  z.literal("steErSent"),
  z.literal("userId"),
]);
export const questionTrackingKeysSchema = z.union([
  z.literal("id"),
  z.literal("posIndex"),
  z.literal("projectId"),
  z.literal("strapiQDictPosIndex"),
  z.literal("strapiQuestionFlowId"),
]);
export const shAnswersKeysSchema = z.union([
  z.literal("catalogueId"),
  z.literal("id"),
  z.literal("key"),
  z.literal("projectId"),
  z.literal("strapiAnswerId"),
  z.literal("type"),
  z.literal("value"),
  z.literal("xmlKey"),
]);
export const shCatalogueVersionsKeysSchema = z.union([
  z.literal("catalogueId"),
  z.literal("catalogueJSON"),
  z.literal("createdAt"),
  z.literal("id"),
]);
export const shProjectKeysSchema = z.union([
  z.literal("gewASent"),
  z.literal("id"),
  z.literal("name"),
  z.literal("progress"),
  z.literal("steErSent"),
  z.literal("userId"),
  z.literal("versionId"),
]);
export const shQuestionTrackingKeysSchema = z.union([
  z.literal("id"),
  z.literal("posIndex"),
  z.literal("projectId"),
  z.literal("strapiQuestionId"),
]);
export const shUserKeysSchema = z.union([
  z.literal("academicTitle"),
  z.literal("cellPhoneNumber"),
  z.literal("city"),
  z.literal("country"),
  z.literal("dateOfBirth"),
  z.literal("email"),
  z.literal("firstName"),
  z.literal("id"),
  z.literal("lastName"),
  z.literal("name"),
  z.literal("phoneNumber"),
  z.literal("postalCode"),
  z.literal("roles"),
  z.literal("street"),
  z.literal("title"),
]);

export type AnswersKeysType = z.infer<typeof answersKeysSchema>;
export type FlagTrackingKeysType = z.infer<typeof flagTrackingKeysSchema>;
export type ProjectKeysType = z.infer<typeof projectKeysSchema>;
export type QuestionTrackingKeysType = z.infer<
  typeof questionTrackingKeysSchema
>;
export type ShAnswersKeysType = z.infer<typeof shAnswersKeysSchema>;
export type ShCatalogueVersionsKeysType = z.infer<
  typeof shCatalogueVersionsKeysSchema
>;
export type ShProjectKeysType = z.infer<typeof shProjectKeysSchema>;
export type ShQuestionTrackingKeysType = z.infer<
  typeof shQuestionTrackingKeysSchema
>;
export type ShUserKeysType = z.infer<typeof shUserKeysSchema>;

export const ANSWERS_KEYS: AnswersKeysType[] = [
  "flowId",
  "id",
  "key",
  "projectId",
  "strapiAnswerId",
  "type",
  "value",
  "xmlKey",
];
export const FLAG_TRACKING_KEYS: FlagTrackingKeysType[] = [
  "flag",
  "id",
  "projectId",
  "qId",
];
export const PROJECT_KEYS: ProjectKeysType[] = [
  "gewASent",
  "id",
  "name",
  "progress",
  "steErSent",
  "userId",
];
export const QUESTION_TRACKING_KEYS: QuestionTrackingKeysType[] = [
  "id",
  "posIndex",
  "projectId",
  "strapiQDictPosIndex",
  "strapiQuestionFlowId",
];
export const SH_ANSWERS_KEYS: ShAnswersKeysType[] = [
  "catalogueId",
  "id",
  "key",
  "projectId",
  "strapiAnswerId",
  "type",
  "value",
  "xmlKey",
];
export const SH_CATALOGUE_VERSIONS_KEYS: ShCatalogueVersionsKeysType[] = [
  "catalogueId",
  "catalogueJSON",
  "createdAt",
  "id",
];
export const SH_PROJECT_KEYS: ShProjectKeysType[] = [
  "gewASent",
  "id",
  "name",
  "progress",
  "steErSent",
  "userId",
  "versionId",
];
export const SH_QUESTION_TRACKING_KEYS: ShQuestionTrackingKeysType[] = [
  "id",
  "posIndex",
  "projectId",
  "strapiQuestionId",
];
export const SH_USER_KEYS: ShUserKeysType[] = [
  "academicTitle",
  "cellPhoneNumber",
  "city",
  "country",
  "dateOfBirth",
  "email",
  "firstName",
  "id",
  "lastName",
  "name",
  "phoneNumber",
  "postalCode",
  "roles",
  "street",
  "title",
];

export type AllEntityKeysRecord = {
  Answers: Answers;
  FlagTracking: FlagTracking;
  Project: Project;
  QuestionTracking: QuestionTracking;
  ShAnswers: ShAnswers;
  ShCatalogueVersions: ShCatalogueVersions;
  ShProject: ShProject;
  ShQuestionTracking: ShQuestionTracking;
};

import DB_SCHEMA from "./db-schema.json";
export { DB_SCHEMA };

export interface EntitiesConfiguration extends AnyEntitiesConfiguration {
  Answers: EntityConfiguration<Answers>;
  FlagTracking: EntityConfiguration<FlagTracking>;
  Project: EntityConfiguration<Project>;
  QuestionTracking: EntityConfiguration<QuestionTracking>;
  ShAnswers: EntityConfiguration<ShAnswers>;
  ShCatalogueVersions: EntityConfiguration<ShCatalogueVersions>;
  ShProject: EntityConfiguration<ShProject>;
  ShQuestionTracking: EntityConfiguration<ShQuestionTracking>;
  enumTranslations: {
    //
  };
  schema: typeof DB_SCHEMA;
}

export function buildEntitySchemaConfigurations() {
  const result = {
    Answers: {
      table: DB_SCHEMA.tables.Answers,
      zod: answersSchema,
      zodKeys: answersKeysSchema,
      keysList: ANSWERS_KEYS,
    },
    FlagTracking: {
      table: DB_SCHEMA.tables.FlagTracking,
      zod: flagTrackingSchema,
      zodKeys: flagTrackingKeysSchema,
      keysList: FLAG_TRACKING_KEYS,
    },
    Project: {
      table: DB_SCHEMA.tables.Project,
      zod: projectSchema,
      zodKeys: projectKeysSchema,
      keysList: PROJECT_KEYS,
    },
    QuestionTracking: {
      table: DB_SCHEMA.tables.QuestionTracking,
      zod: questionTrackingSchema,
      zodKeys: questionTrackingKeysSchema,
      keysList: QUESTION_TRACKING_KEYS,
    },
    ShAnswers: {
      table: DB_SCHEMA.tables.ShAnswers,
      zod: shAnswersSchema,
      zodKeys: shAnswersKeysSchema,
      keysList: SH_ANSWERS_KEYS,
    },
    ShCatalogueVersions: {
      table: DB_SCHEMA.tables.ShCatalogueVersions,
      zod: shCatalogueVersionsSchema,
      zodKeys: shCatalogueVersionsKeysSchema,
      keysList: SH_CATALOGUE_VERSIONS_KEYS,
    },
    ShProject: {
      table: DB_SCHEMA.tables.ShProject,
      zod: shProjectSchema,
      zodKeys: shProjectKeysSchema,
      keysList: SH_PROJECT_KEYS,
    },
    ShQuestionTracking: {
      table: DB_SCHEMA.tables.ShQuestionTracking,
      zod: shQuestionTrackingSchema,
      zodKeys: shQuestionTrackingKeysSchema,
      keysList: SH_QUESTION_TRACKING_KEYS,
    },

    schema: DB_SCHEMA,
  };

  return result;
}

export const STARTUPHAFEN_ENTITY_SCHEMA = buildEntitySchemaConfigurations();
